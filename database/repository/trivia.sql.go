// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: trivia.sql

package repository

import (
	"context"
)

const createTrivia = `-- name: CreateTrivia :execlastid
INSERT INTO trivia (title, question, answer, dificulity_id)
VALUES (?, ?, ?, ?)
`

type CreateTriviaParams struct {
	Title        string `json:"title"`
	Question     string `json:"question"`
	Answer       string `json:"answer"`
	DificulityID int64  `json:"dificulity_id"`
}

func (q *Queries) CreateTrivia(ctx context.Context, arg CreateTriviaParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createTrivia,
		arg.Title,
		arg.Question,
		arg.Answer,
		arg.DificulityID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createTriviaChoice = `-- name: CreateTriviaChoice :exec
INSERT INTO trivia_choice (trivia_id, choice)
VALUES (?, ?)
`

type CreateTriviaChoiceParams struct {
	TriviaID int64  `json:"trivia_id"`
	Choice   string `json:"choice"`
}

func (q *Queries) CreateTriviaChoice(ctx context.Context, arg CreateTriviaChoiceParams) error {
	_, err := q.db.ExecContext(ctx, createTriviaChoice, arg.TriviaID, arg.Choice)
	return err
}

const createTriviaDetail = `-- name: CreateTriviaDetail :exec
INSERT INTO trivia_detail (user_id, trivia_id, trivia_status_id)
VALUES (?, ?, ?)
`

type CreateTriviaDetailParams struct {
	UserID         int64 `json:"user_id"`
	TriviaID       int64 `json:"trivia_id"`
	TriviaStatusID int64 `json:"trivia_status_id"`
}

func (q *Queries) CreateTriviaDetail(ctx context.Context, arg CreateTriviaDetailParams) error {
	_, err := q.db.ExecContext(ctx, createTriviaDetail, arg.UserID, arg.TriviaID, arg.TriviaStatusID)
	return err
}

const findAllSubmission = `-- name: FindAllSubmission :many
SELECT t.title, df.name as diffname, u.name FROM trivia t JOIN trivia_detail as td 
ON t.id = td.trivia_id JOIN user as u ON td.user_id = u.id JOIN dificulity as df ON df.id = t.dificulity_id
WHERE td.trivia_status_id = 2
`

type FindAllSubmissionRow struct {
	Title    string `json:"title"`
	Diffname string `json:"diffname"`
	Name     string `json:"name"`
}

func (q *Queries) FindAllSubmission(ctx context.Context) ([]*FindAllSubmissionRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllSubmission)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*FindAllSubmissionRow
	for rows.Next() {
		var i FindAllSubmissionRow
		if err := rows.Scan(&i.Title, &i.Diffname, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findChoicesOfTrivia = `-- name: FindChoicesOfTrivia :many
SELECT choice FROM trivia_choice WHERE trivia_id = ?
`

func (q *Queries) FindChoicesOfTrivia(ctx context.Context, triviaID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, findChoicesOfTrivia, triviaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var choice string
		if err := rows.Scan(&choice); err != nil {
			return nil, err
		}
		items = append(items, choice)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findReviewSubmission = `-- name: FindReviewSubmission :many
SELECT t.id, t.title, t.question, t.answer, t.dificulity_id, td.trivia_status_id, tc.id as choice_id, tc.choice FROM trivia t 
JOIN trivia_detail as td ON t.id = td.trivia_id JOIN trivia_choice as tc ON t.id = tc.trivia_id
WHERE td.trivia_status_id = 2
`

type FindReviewSubmissionRow struct {
	ID             int64  `json:"id"`
	Title          string `json:"title"`
	Question       string `json:"question"`
	Answer         string `json:"answer"`
	DificulityID   int64  `json:"dificulity_id"`
	TriviaStatusID int64  `json:"trivia_status_id"`
	ChoiceID       int64  `json:"choice_id"`
	Choice         string `json:"choice"`
}

func (q *Queries) FindReviewSubmission(ctx context.Context) ([]*FindReviewSubmissionRow, error) {
	rows, err := q.db.QueryContext(ctx, findReviewSubmission)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*FindReviewSubmissionRow
	for rows.Next() {
		var i FindReviewSubmissionRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Question,
			&i.Answer,
			&i.DificulityID,
			&i.TriviaStatusID,
			&i.ChoiceID,
			&i.Choice,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTriviaWithSpecs = `-- name: FindTriviaWithSpecs :many
SELECT t.id, t.title, t.question , t.answer
FROM trivia t
WHERE t.dificulity_id = ? AND t.id NOT IN 
   (SELECT trivia_id FROM trivia_detail WHERE user_id = ? OR (trivia_status_id = 2 OR trivia_status_id = 3))
LIMIT ?
`

type FindTriviaWithSpecsParams struct {
	DificulityID int64 `json:"dificulity_id"`
	UserID       int64 `json:"user_id"`
	Limit        int32 `json:"limit"`
}

type FindTriviaWithSpecsRow struct {
	ID       int64  `json:"id"`
	Title    string `json:"title"`
	Question string `json:"question"`
	Answer   string `json:"answer"`
}

func (q *Queries) FindTriviaWithSpecs(ctx context.Context, arg FindTriviaWithSpecsParams) ([]*FindTriviaWithSpecsRow, error) {
	rows, err := q.db.QueryContext(ctx, findTriviaWithSpecs, arg.DificulityID, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*FindTriviaWithSpecsRow
	for rows.Next() {
		var i FindTriviaWithSpecsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Question,
			&i.Answer,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrivaStatus = `-- name: UpdateTrivaStatus :exec
UPDATE trivia_detail SET trivia_status_id = ? WHERE trivia_id = ?
`

type UpdateTrivaStatusParams struct {
	TriviaStatusID int64 `json:"trivia_status_id"`
	TriviaID       int64 `json:"trivia_id"`
}

func (q *Queries) UpdateTrivaStatus(ctx context.Context, arg UpdateTrivaStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTrivaStatus, arg.TriviaStatusID, arg.TriviaID)
	return err
}

const updateTrivia = `-- name: UpdateTrivia :exec
UPDATE trivia SET title = ?, question = ?, answer = ?, dificulity_id = ? WHERE id = ?
`

type UpdateTriviaParams struct {
	Title        string `json:"title"`
	Question     string `json:"question"`
	Answer       string `json:"answer"`
	DificulityID int64  `json:"dificulity_id"`
	ID           int64  `json:"id"`
}

func (q *Queries) UpdateTrivia(ctx context.Context, arg UpdateTriviaParams) error {
	_, err := q.db.ExecContext(ctx, updateTrivia,
		arg.Title,
		arg.Question,
		arg.Answer,
		arg.DificulityID,
		arg.ID,
	)
	return err
}

const updateTriviaChoice = `-- name: UpdateTriviaChoice :exec
UPDATE trivia_choice SET choice = ? WHERE id = ?
`

type UpdateTriviaChoiceParams struct {
	Choice string `json:"choice"`
	ID     int64  `json:"id"`
}

func (q *Queries) UpdateTriviaChoice(ctx context.Context, arg UpdateTriviaChoiceParams) error {
	_, err := q.db.ExecContext(ctx, updateTriviaChoice, arg.Choice, arg.ID)
	return err
}
