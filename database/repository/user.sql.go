// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package repository

import (
	"context"
)

const checkIfAdmin = `-- name: CheckIfAdmin :one
SELECT role_id FROM user WHERE id = ?
`

func (q *Queries) CheckIfAdmin(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkIfAdmin, id)
	var role_id int64
	err := row.Scan(&role_id)
	return role_id, err
}

const createUser = `-- name: CreateUser :execlastid
INSERT INTO user (name, user_name, role_id, email, password) 
VALUES (?,?,?,?,?)
`

type CreateUserParams struct {
	Name     string `json:"name"`
	UserName string `json:"user_name"`
	RoleID   int64  `json:"role_id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.UserName,
		arg.RoleID,
		arg.Email,
		arg.Password,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createUserDetail = `-- name: CreateUserDetail :exec
INSERT INTO user_detail (user_id) VALUES (?)
`

func (q *Queries) CreateUserDetail(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, createUserDetail, userID)
	return err
}

const deleteTrivia = `-- name: DeleteTrivia :exec
DELETE FROM trivia WHERE id = ?
`

func (q *Queries) DeleteTrivia(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrivia, id)
	return err
}

const deleteTriviaChoice = `-- name: DeleteTriviaChoice :exec
DELETE FROM trivia_choice WHERE trivia_id = ?
`

func (q *Queries) DeleteTriviaChoice(ctx context.Context, triviaID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTriviaChoice, triviaID)
	return err
}

const deleteTriviaDetail = `-- name: DeleteTriviaDetail :exec
DELETE FROM trivia_detail WHERE trivia_id = ?
`

func (q *Queries) DeleteTriviaDetail(ctx context.Context, triviaID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTriviaDetail, triviaID)
	return err
}

const findMyTrivia = `-- name: FindMyTrivia :many
SELECT t.id, t.title, t.dificulity_id, td.trivia_status_id FROM trivia t
JOIN trivia_detail td ON t.id = td.trivia_id
WHERE td.user_id = ? AND (td.trivia_status_id = 2 OR td.trivia_status_id = 3)
`

type FindMyTriviaRow struct {
	ID             int64  `json:"id"`
	Title          string `json:"title"`
	DificulityID   int64  `json:"dificulity_id"`
	TriviaStatusID int64  `json:"trivia_status_id"`
}

func (q *Queries) FindMyTrivia(ctx context.Context, userID int64) ([]*FindMyTriviaRow, error) {
	rows, err := q.db.QueryContext(ctx, findMyTrivia, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*FindMyTriviaRow
	for rows.Next() {
		var i FindMyTriviaRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.DificulityID,
			&i.TriviaStatusID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserDetailById = `-- name: FindUserDetailById :one
SELECT trivia_round,right_answer, wrong_answer FROM user_detail WHERE user_id = ?
`

type FindUserDetailByIdRow struct {
	TriviaRound int64 `json:"trivia_round"`
	RightAnswer int64 `json:"right_answer"`
	WrongAnswer int64 `json:"wrong_answer"`
}

func (q *Queries) FindUserDetailById(ctx context.Context, userID int64) (*FindUserDetailByIdRow, error) {
	row := q.db.QueryRowContext(ctx, findUserDetailById, userID)
	var i FindUserDetailByIdRow
	err := row.Scan(&i.TriviaRound, &i.RightAnswer, &i.WrongAnswer)
	return &i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, user_name, role_id, email, password, created_at, updated_at FROM user WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserName,
		&i.RoleID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserTriviaDetails = `-- name: GetUserTriviaDetails :one
SELECT u.name, t.title FROM user u 
JOIN trivia_detail ON u.id = ut.user_id 
JOIN trivia t ON ut.trivia_id = t.id 
WHERE u.id = ?
`

type GetUserTriviaDetailsRow struct {
	Name  string `json:"name"`
	Title string `json:"title"`
}

func (q *Queries) GetUserTriviaDetails(ctx context.Context, id int64) (*GetUserTriviaDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getUserTriviaDetails, id)
	var i GetUserTriviaDetailsRow
	err := row.Scan(&i.Name, &i.Title)
	return &i, err
}

const migrateAdmin = `-- name: MigrateAdmin :execlastid
INSERT INTO user (name, user_name, role_id, email, password) VALUES (?, ?, ?, ?, ?)
`

type MigrateAdminParams struct {
	Name     string `json:"name"`
	UserName string `json:"user_name"`
	RoleID   int64  `json:"role_id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) MigrateAdmin(ctx context.Context, arg MigrateAdminParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, migrateAdmin,
		arg.Name,
		arg.UserName,
		arg.RoleID,
		arg.Email,
		arg.Password,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const selectUserAboveAverage = `-- name: SelectUserAboveAverage :many
SELECT u.name, ud.trivia_round, ud.right_answer, ud.wrong_answer
FROM user u JOIN user_detail ud ON u.id = ud.user_id
WHERE ud.trivia_round > 0 AND ud.right_answer/(ud.right_answer + ud.wrong_answer) >= (
  SELECT AVG(right_answer/(right_answer+wrong_answer)) FROM user_detail WHERE trivia_round > 0
)
`

type SelectUserAboveAverageRow struct {
	Name        string `json:"name"`
	TriviaRound int64  `json:"trivia_round"`
	RightAnswer int64  `json:"right_answer"`
	WrongAnswer int64  `json:"wrong_answer"`
}

func (q *Queries) SelectUserAboveAverage(ctx context.Context) ([]*SelectUserAboveAverageRow, error) {
	rows, err := q.db.QueryContext(ctx, selectUserAboveAverage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SelectUserAboveAverageRow
	for rows.Next() {
		var i SelectUserAboveAverageRow
		if err := rows.Scan(
			&i.Name,
			&i.TriviaRound,
			&i.RightAnswer,
			&i.WrongAnswer,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserBelowAverage = `-- name: SelectUserBelowAverage :many
SELECT u.name, ud.trivia_round, ud.right_answer, ud.wrong_answer
FROM user u JOIN user_detail ud ON u.id = ud.user_id
WHERE ud.trivia_round > 0 AND ud.right_answer/(ud.right_answer + ud.wrong_answer) < (
  SELECT AVG(right_answer/(right_answer+wrong_answer)) FROM user_detail WHERE trivia_round > 0
)
`

type SelectUserBelowAverageRow struct {
	Name        string `json:"name"`
	TriviaRound int64  `json:"trivia_round"`
	RightAnswer int64  `json:"right_answer"`
	WrongAnswer int64  `json:"wrong_answer"`
}

func (q *Queries) SelectUserBelowAverage(ctx context.Context) ([]*SelectUserBelowAverageRow, error) {
	rows, err := q.db.QueryContext(ctx, selectUserBelowAverage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SelectUserBelowAverageRow
	for rows.Next() {
		var i SelectUserBelowAverageRow
		if err := rows.Scan(
			&i.Name,
			&i.TriviaRound,
			&i.RightAnswer,
			&i.WrongAnswer,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
SELECT id, name, user_name, role_id, email, password, created_at, updated_at FROM user WHERE email = ?
`

func (q *Queries) SelectUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRowContext(ctx, selectUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserName,
		&i.RoleID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const selectUserRankAsc = `-- name: SelectUserRankAsc :many
SELECT u.name, ud.trivia_round, ud.right_answer, (ud.wrong_answer + ud.right_answer) as total_answer
FROM user u JOIN user_detail ud ON u.id = ud.user_id
WHERE ud.trivia_round > 0 ORDER BY ud.right_answer ASC, ud.trivia_round ASC
`

type SelectUserRankAscRow struct {
	Name        string `json:"name"`
	TriviaRound int64  `json:"trivia_round"`
	RightAnswer int64  `json:"right_answer"`
	TotalAnswer int32  `json:"total_answer"`
}

func (q *Queries) SelectUserRankAsc(ctx context.Context) ([]*SelectUserRankAscRow, error) {
	rows, err := q.db.QueryContext(ctx, selectUserRankAsc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SelectUserRankAscRow
	for rows.Next() {
		var i SelectUserRankAscRow
		if err := rows.Scan(
			&i.Name,
			&i.TriviaRound,
			&i.RightAnswer,
			&i.TotalAnswer,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserRankDesc = `-- name: SelectUserRankDesc :many
SELECT u.name, ud.trivia_round, ud.right_answer , (ud.wrong_answer + ud.right_answer) as total_answer
FROM user u JOIN user_detail ud ON u.id = ud.user_id
WHERE ud.trivia_round > 0 ORDER BY ud.right_answer DESC, ud.trivia_round DESC
`

type SelectUserRankDescRow struct {
	Name        string `json:"name"`
	TriviaRound int64  `json:"trivia_round"`
	RightAnswer int64  `json:"right_answer"`
	TotalAnswer int32  `json:"total_answer"`
}

func (q *Queries) SelectUserRankDesc(ctx context.Context) ([]*SelectUserRankDescRow, error) {
	rows, err := q.db.QueryContext(ctx, selectUserRankDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SelectUserRankDescRow
	for rows.Next() {
		var i SelectUserRankDescRow
		if err := rows.Scan(
			&i.Name,
			&i.TriviaRound,
			&i.RightAnswer,
			&i.TotalAnswer,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const triviaByDificulity = `-- name: TriviaByDificulity :many
SELECT id, title, question, answer, dificulity_id, created_at, updated_at FROM trivia WHERE dificulity_id = ?
`

func (q *Queries) TriviaByDificulity(ctx context.Context, dificulityID int64) ([]*Trivium, error) {
	rows, err := q.db.QueryContext(ctx, triviaByDificulity, dificulityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Trivium
	for rows.Next() {
		var i Trivium
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Question,
			&i.Answer,
			&i.DificulityID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserDetail = `-- name: UpdateUserDetail :exec
UPDATE user_detail SET trivia_round = ?, right_answer = ?, wrong_answer = ? WHERE user_id = ?
`

type UpdateUserDetailParams struct {
	TriviaRound int64 `json:"trivia_round"`
	RightAnswer int64 `json:"right_answer"`
	WrongAnswer int64 `json:"wrong_answer"`
	UserID      int64 `json:"user_id"`
}

func (q *Queries) UpdateUserDetail(ctx context.Context, arg UpdateUserDetailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserDetail,
		arg.TriviaRound,
		arg.RightAnswer,
		arg.WrongAnswer,
		arg.UserID,
	)
	return err
}
